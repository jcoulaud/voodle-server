# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

union AuthResult = AuthResultBase | AuthResultWithMnemonic

type AuthResultBase {
  message: String!
  success: Boolean!
}

type AuthResultWithMnemonic {
  message: String!
  mnemonic: String!
  success: Boolean!
}

input CreateStrategyInput {
  maxBetAmount: Float!
  name: String!
  strategy: JSON!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EditStrategyInput {
  id: ID!
  isActive: Boolean
  maxBetAmount: Float
  name: String
}

input EditUserInput {
  username: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createStrategy(input: CreateStrategyInput!): Strategy!
  editStrategy(input: EditStrategyInput!): Strategy!
  editUser(input: EditUserInput!): User!
  logout: AuthResultBase!
  refreshToken: AuthResultBase!
  sendMagicLink(email: String!): AuthResult!
  verifyMagicLink(email: String!, token: String!): AuthResult!
  withdrawFunds(amount: String!, fromAddress: String!, toAddress: String!): Success!
}

type PaginatedTransactions {
  data: [Transaction!]!
  limit: Int!
  page: Int!
  total: Int!
}

type Query {
  getUserTransactions(limit: Int!, page: Int!): PaginatedTransactions!
  getUserWallets: [Wallet!]!
  getWalletBalance(address: String!): String!
  getWalletPrivateKey(address: String!): String!
  me: User
  userStrategies: [Strategy!]!
}

type Strategy {
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  maxBetAmount: Float!
  name: String!
  pnlTON: Float
  pnlUSD: Float
  strategyLogic: JSON!
  updatedAt: DateTime!
  userId: ID!
}

type Success {
  success: Boolean!
}

type Transaction {
  amount_token: String!
  amount_ton: String!
  created_at: DateTime!
  dex: String!
  id: ID!
  price_in_usd: String!
  status: String!
  strategy_id: ID!
  token_id: ID!
  transaction_id: String
  type: String!
  user_id: ID!
}

type User {
  createdAt: DateTime!
  email: String!
  emailVerified: DateTime
  id: ID!
  updatedAt: DateTime!
  username: String!
}

type Wallet {
  address: String!
  blockchain: String!
}